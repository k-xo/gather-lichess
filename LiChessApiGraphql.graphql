schema {
  query: Query
}

type Query {
  """
  Read public data of a user.


  Equivalent to GET /api/user/{username}
  """
  apiUser(username: String!): User
  """
  Read rating history of a user, for all perf types.
  There is at most one entry per day.
  Format of an entry is `[year, month, day, rating]`.
  `month` starts at zero (January).


  Equivalent to GET /api/user/{username}/rating-history
  """
  apiUserRatingHistory(username: String!): RatingHistory
  """
  Read the `online`, `playing` and `streaming` flags of several users.

  This API is very fast and cheap on lichess side.
  So you can call it quite often (like once every 5 seconds).

  Use it to track players and know when they're connected on lichess and playing games.


  Equivalent to GET /api/users/status
  """
  apiUsersStatus(
    """
    User IDs separated by commas. Up to 50 IDs.
    """
    ids: String!
    """
    Auto-generated argument that limits the size of returned list of objects/list, selecting the first `n` elements of the list
    """
    limit: Int
  ): [ApiUsersStatusListItem]
}

"""
Read public data of a user.
"""
type User {
  blocking: Boolean!
  completionRate: Int!
  count: Count!
  createdAt: Int!
  disabled: Boolean!
  followable: Boolean!
  following: Boolean!
  followsYou: Boolean!
  id: String!
  language: String!
  nbFollowers: Int!
  nbFollowing: Int!
  online: Boolean!
  patron: Boolean!
  perfs: Perfs!
  playTime: PlayTime!
  playing: String!
  profile: Profile!
  seenAt: Int!
  streaming: Boolean!
  title: String!
  tosViolation: Boolean!
  url: String!
  username: String!
}

type Count {
  ai: Int!
  all: Int!
  bookmark: Int!
  draw: Int!
  drawH: Int!
  import: Int!
  loss: Int!
  lossH: Int!
  me: Int!
  playing: Int!
  rated: Int!
  win: Int!
  winH: Int!
}

type Perfs {
  atomic: Atomic!
  blitz: Blitz!
  bullet: Bullet!
  chess960: Chess960!
  classical: Classical!
  correspondence: Correspondence!
  horde: Horde!
  kingOfTheHill: KingOfTheHill!
  puzzle: Puzzle!
  racingKings: RacingKings!
  rapid: Rapid!
  storm: Storm!
  ultraBullet: UltraBullet!
}

type Atomic {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Blitz {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Bullet {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Chess960 {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Classical {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Correspondence {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Horde {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type KingOfTheHill {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Puzzle {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type RacingKings {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Rapid {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type Storm {
  runs: Int!
  score: Int!
}

type UltraBullet {
  games: Int!
  prog: Int!
  prov: Boolean!
  rating: Int!
  rd: Int!
}

type PlayTime {
  total: Int!
  tv: Int!
}

type Profile {
  bio: String!
  country: String!
  ecfRating: Int!
  fideRating: Int!
  firstName: String!
  lastName: String!
  links: String!
  location: String!
  uscfRating: Int!
}

type RatingHistory {
  ratingEntry: [RatingEntry]!
}

type RatingEntry {
  name: String
  points: [Point]
}

type Point {
  data: [int]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type ApiUsersStatusListItem {
  id: String
  name: String
  online: Boolean
  patron: Boolean
  playing: Boolean
  streaming: Boolean
  title: String
}
